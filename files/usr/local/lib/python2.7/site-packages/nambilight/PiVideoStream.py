from threading import Thread
import cv2

class PiVideoStream(Thread):
    """ DominantColorThread thread """

    # initialize object   ----------------------------------------------------

    def __init__(self, settings):
        """ Constructor """

        super(PiVideoStream, self).__init__(name="PiVideoStream")
        self._settings = settings
        self._stop_event = settings.stop_event
        self._stream = cv2.VideoCapture(0)
        self._stream.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self._stream.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self._image = None
        self._ready = False


    def run(self):
        """ run-method of thread """

        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_BRIGHTNESS)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_GAIN)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_EXPOSURE)))
        self._stop_event.wait(2)
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_BRIGHTNESS)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_GAIN)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_EXPOSURE)))


        self._settings.log.msg("PiVideoStream: setting brightness")
        self._stream.set(cv2.CAP_PROP_BRIGHTNESS, 0.1)
        self._settings.log.msg("PiVideoStream: setting gain")
        self._stream.set(cv2.CAP_PROP_GAIN, 100.0)
        self._settings.log.msg("PiVideoStream: setting exposure")
        self._stream.set(cv2.CAP_PROP_EXPOSURE, 0.1)
        self._settings.log.msg("PiVideoStream: setting auto_exposure")
        self._stream.set(cv2.CAP_PROP_AUTO_EXPOSURE, 0.25)
        self._settings.log.msg("PiVideoStream: running PiVideoStream...")
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_BRIGHTNESS)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_GAIN)))
        self._settings.log.msg("PiVideoStream: " + str(self._stream.get(cv2.CAP_PROP_EXPOSURE)))
        while not self._stop_event.wait(0.02):
            grabbed, image = self._stream.read()
            if grabbed:
                if self._ready == False:
                    self._settings.log.msg("PiVideoStream: stream ready")
                    self._ready = True
                self._image = image
            else:
                self._settings.log.msg("PiVideoStream: [ERROR] grabbing image")

        self._settings.log.msg("PiVideoStream: shutdown")
        self._stream.release()


    def ready(self):
        if self._ready:
            return True
        return False


    def read(self):
        return self._image
