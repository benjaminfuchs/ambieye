#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of LedController - utility functions for the LED-strip
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/nerda
#
# --------------------------------------------------------------------------

import time
import blinkt
import requests
import webcolors
from threading import Thread


class LedControllerThread(Thread):
    """ LedControllerThread thread """

    # initialize object   ----------------------------------------------------

    def __init__(self, settings):
        """ Constructor """

        super(LedControllerThread, self).__init__(name="LedControllerThread")
        self._settings = settings
        self._stop_event = settings.stop_event
        self._brightness = settings.get('led.brightness')
        self._color = ["#000000", "#000000", "#000000"]
        self._urls = settings.get('led.urls')
        self._port = settings.get('led.port')
        self._color_current = ["#000000", "#000000", "#000000"]
        settings.add_settings_listener('led.brightness', self.on_brightness)
        settings.add_settings_listener('led.color', self.on_color)

    def run(self):
        """ run-method of thread """

        self._settings.log.msg("LedControllerThread: running LedControllerThread...")
        while not self._stop_event.wait(0.01):
            if self._settings.get("screen.ready") == "true":
                for index, color in enumerate(self._color):
                    color_hex = webcolors.hex_to_rgb(color)
                    color_current = webcolors.hex_to_rgb(self._color_current[index])
                    new_color = []

                    for color_index, _ in enumerate(color_current):
                        diff = abs(color_hex[color_index] - color_current[color_index])
                        if color_hex[color_index] > color_current[color_index]:
                            new_color.append(min(color_current[color_index] + max(int(diff/20), 1), 255))
                        elif color_hex[color_index] < color_current[color_index]:
                            new_color.append(max(color_current[color_index] - max(int(diff/20), 1), 0))
                        else:
                            new_color.append(color_current[color_index])
                    self._color_current[index] = webcolors.rgb_to_hex(new_color)

                Thread(target=self._set_color_url, args=(self._color_current[0], self._urls[2]).start()
                Thread(target=self._set_color_url, args=(self._color_current[2], self._urls[1]).start()
                Thread(target=self._set_color_url, args=(self._color_current[1], self._urls[0]).start()

        self._settings.log.msg("LedControllerThread: shutdown")
        self._set_color("#000000")

    # --- brightness change listener   ---------------------------------------

    def on_brightness(self, name, old, new):
        """ process brightness-changes """

        self._set_brightness(new)

    # --- set the brightness of the LEDs   -----------------------------------

    def _set_brightness(self, value=None):
        """ Set the brightness of the leds """

        # we only use off and four levels, so scale new appropriately
        if not value is None:
            self._brightness = value

        self._settings.log.msg(
            "LedControllerThread: setting brightness to: %d" % self._brightness)
        for url in self._urls:
            try:
                r = requests.post("http://" + url + ":" + str(self._port) + "/save_settings",
                                json={"led.brightness": self._brightness, "led.color": self._color})
            except requests.exceptions.ConnectionError as exception:
                self._settings.log.msg(
                    "LedControllerThread: [ERROR] Could not send color! (%s)" % str(exception))

    # --- color change listener   --------------------------------------------

    def on_color(self, name, old, new):
        """ process color-changes """

        self._color = new

    # --- set the color of the LEDs   -----------------------------------

    def _set_color(self, value=None):
        """ Set the brightness of the leds """

        for url in self._urls:
            try:
                r = requests.post("http://" + url + ":" + str(self._port) + "/save_settings",
                                json={"led.brightness": self._brightness, "led.color": value}, timeout=0.05)
            except requests.exceptions.ConnectionError as exception:
                self._settings.log.msg("[ERROR] Could not send color! (%s)" % str(exception))
            except requests.exceptions.ReadTimeout as exception:
                self._settings.log.msg("[ERROR] Could not send color! (%s)" % str(exception))

    def _set_color_url(self, value, url):
        """ Set the brightness of the leds """

        try:
            r = requests.post("http://" + url + ":" + str(self._port) + "/save_settings",
                            json={"led.brightness": self._brightness, "led.color": value}, timeout=0.05)
        except requests.exceptions.ConnectionError as exception:
            self._settings.log.msg("[ERROR] Could not send color! (%s)" % str(exception))
        except requests.exceptions.ReadTimeout as exception:
            self._settings.log.msg("[ERROR] Could not send color! (%s)" % str(exception))
