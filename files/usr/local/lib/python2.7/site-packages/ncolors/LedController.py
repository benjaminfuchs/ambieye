#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of LedController - utility functions for the LED-strip
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/benjaminfuchs/ambieye
#
# --------------------------------------------------------------------------

import time
import blinkt
import requests
import webcolors


class LedController(object):
    """ Utility functions for the LED-strip """

    # initialize object   ----------------------------------------------------

    def __init__(self, settings):
        """ Constructor """
        self._settings = settings
        self._brightness = settings.get('led.brightness')
        self._color = settings.get('led.color')

        settings.add_settings_listener('led.brightness', self.on_brightness)
        settings.add_settings_listener('led.color', self.on_color)

    # --- brightness change listener   ---------------------------------------

    def on_brightness(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_brightness(%s,%s)" % (old, new))
        self._set_brightness(new)

    # --- set the brightness of the LEDs   -----------------------------------

    def _set_brightness(self, value=None):
        """ Set the brightness of the leds """

        # we only use off and four levels, so scale new appropriately
        if not value is None:
            self._brightness = value

        self._settings.log.msg(
            "LedController: setting brightness to: %d" % self._brightness)
        try:
            r = requests.post("http://192.168.178.23:5000/save_settings",
                              json={"led.brightness": self._brightness, "led.color": self._color})
        except requests.exceptions.ConnectionError as exception:
            self._settings.log.msg(
                "LedController: [ERROR] Could not send color! (%s)" % str(exception))

    # --- color change listener   --------------------------------------------

    def on_color(self, name, old, new):
        """ process color-changes """

        self._settings.log.msg("LedController: on_color(%s,%s)" % (old, new))
        self._set_color(new)

    # --- set the color of the LEDs   -----------------------------------

    def _set_color(self, value=None):
        """ Set the brightness of the leds """

        if not value is None:
            self._color = value

        self._settings.log.msg("LedController: setting color to: %s" % value)
        try:
            r = requests.post("http://192.168.178.23:5000/save_settings",
                              json={"led.brightness": 1, "led.color": value})
        except requests.exceptions.ConnectionError as exception:
            LOGGER.error("Could not send color! (%s)", str(exception))
