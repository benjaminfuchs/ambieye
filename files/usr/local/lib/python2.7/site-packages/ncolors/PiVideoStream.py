from threading import Thread
import cv2

class PiVideoStream(Thread):
    """ DominantColorThread thread """

    # initialize object   ----------------------------------------------------

    def __init__(self, settings):
        """ Constructor """

        super(PiVideoStream, self).__init__(name="PiVideoStream")
        self._settings = settings
        self._stop_event = settings.stop_event
        self._stream = cv2.VideoCapture(0)
        self._stream.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self._stream.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        self._image = None
        self._ready = False
        self._alpha = settings.get('image.alpha')
        self._beta = settings.get('image.beta')

        settings.add_settings_listener('image.contrast', self.on_contrast)
        settings.add_settings_listener('image.brightness', self.on_brightness)
        settings.add_settings_listener('image.exposure', self.on_exposure)
        settings.add_settings_listener('image.saturation', self.on_saturation)
        settings.add_settings_listener('image.white', self.on_white)

    def run(self):
        """ run-method of thread """

        self._stop_event.wait(2)

        self._settings.log.msg("PiVideoStream: running PiVideoStream...")
        while not self._stop_event.is_set():
            grabbed, image = self._stream.read()
            if grabbed:
                if self._ready == False:
                    self._settings.log.msg("PiVideoStream: stream ready")
                    self._ready = True
                self._image = image
            else:
                self._settings.log.msg("PiVideoStream: [ERROR] grabbing image")

        self._settings.log.msg("PiVideoStream: shutdown")
        self._stream.release()


    def on_brightness(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_brightness(%s,%s)" % (old, new))
        self._stream.set(10, float(new)) # CV_CAP_PROP_BRIGHTNESS


    def on_contrast(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_contrast(%s,%s)" % (old, new))
        self._stream.set(11, float(new)) # CV_CAP_PROP_CONTRAST


    def on_saturation(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_saturation(%s,%s)" % (old, new))
        self._stream.set(12, float(new)) # CV_CAP_PROP_SATURATION


    def on_exposure(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_exposure(%s,%s)" % (old, new))
        self._stream.set(15, float(new)) # CV_CAP_PROP_EXPOSURE


    def on_white(self, name, old, new):
        """ process brightness-changes """

        self._settings.log.msg("LedController: on_white(%s,%s)" % (old, new))
        self._stream.set(17, float(new)) # CV_CAP_PROP_WHITE_BALANCE


    def ready(self):
        if self._ready:
            return True
        return False

    def read(self):
        return self._image
